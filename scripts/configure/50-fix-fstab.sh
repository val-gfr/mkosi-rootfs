#!/bin/bash

jsonconf=$(cat)

# consider only one
buildsource=$(echo "$jsonconf" | jq -r '.BuildSources[0].Source')

TMPSRCDIR=$SRCDIR/tmp
TMP_REPART=tmp/tmp-repartdirs-fixvfat
TMP_SKEL_FSTAB=tmp/tmp-skeleton-fstab

# path in bwrap
TMPSRC_REPART=$SRCDIR/$TMP_REPART
TMPSRC_FSTAB=$SRCDIR/$TMP_SKEL_FSTAB/etc/fstab

# path in buildsource
TMPBUILD_REPART=$buildsource/$TMP_REPART
TMPBUILD_SKEL_FSTAB=$buildsource/$TMP_SKEL_FSTAB


function partition {
	local repf=$1
	local format=$(grep "Format=" $repf | cut -d '=' -f 2)
	local mountpoint=$(grep "MountPoint=" $repf | cut -d '=' -f 2)
	local label=$(grep "Label=" $repf | cut -d '=' -f 2 | tr '[:lower:]' '[:upper:]')

	# comment mount point to not generate fstab
	sed -i "s/^MountPoint=/#&/" $repf
	# Label should be in uppercase
	sed -i "s/^Label=.*/Label=$label/" $repf

	[ -z "$mountpoint" ] && return

	echo "LABEL=$label $mountpoint $format discard,rw,nodev,suid,exec 0 2" >> $TMPSRC_FSTAB
}

rm -fr $TMPSRC_REPART
rm -fr $TMPSRC_FSTAB
mkdir -p $TMPSRC_REPART
mkdir -p $(dirname $TMPSRC_FSTAB)

# set new repart directories: everything is copied in tmp
newreparts=
for d in $(echo "$jsonconf" | jq -r '.RepartDirectories[]'); do
	d_in_bwrap=$(echo $d | sed "s#$buildsource##")
	cp -r $SRCDIR/$d_in_bwrap $TMPSRC_REPART
	[ "$newreparts" ] && newreparts="$newreparts,"
	newreparts="${newreparts}\"$TMPBUILD_REPART/$(basename $d)\""
done


# generate fstab
cat << EOF > $TMPSRC_FSTAB
# RedPesk: Manually generated by Anaconda and set statically for RAMFS
EOF

#for repf in $(find $TMPSRC_REPART -name '*.conf' | sort); do
#	partition $repf
#done
#
#echo "[redpesk fix fstab] Set configuration for RepartDirectories to [$newreparts] and SkeletonTrees += [{"Source": '"\"$TMPBUILD_SKEL_FSTAB\""', "Target": null}]" >&2
#echo "$jsonconf" | jq -c '.RepartDirectories=['"$newreparts"']' | jq -c '.SkeletonTrees+=[{"Source": '"\"$TMPBUILD_SKEL_FSTAB\""', "Target": null}]'
